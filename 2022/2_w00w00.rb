#!/usr/bin/env ruby

require "base64"
require "chunky_png"


# <p hidden plain text xor encrypted blob, using the character strings from qbert 230d245c2c2d27113b3138122c2636172b372d19212824162a31371e3e2d350037213318372133173a2e2405222e200522202a0c2331310c3a312f0334322c01261516163f255f112e2c201b21212f10283228042430360d28362e0d28362e003721331837213318292b351928303500282a350e2b2d3712342120053e2b271425201c0e283a29013b2d361139333b1d3f3b3f1d3f3b320d28362a0228362e1322302f123920321223303c1e2422200128353304223226102c382d122333200e2427283f20002447372e240522333b123f2b3b123f2b2518392a240339332419393d27113b313c1d2c2636172b372916212824192a21371e3e2d35003721331837213318341616053e16550522202e0c233135033a312b0c34322c0e283d24163f372e112e3c241421312f1028222c042430320228362e0228262e003721331737313318292e040c28302613282a31012b2d371d3431240a3e3b231425252914282a261d3b3d321e39333b123f2b3b123f2b360228262e0d28262a1c22202b1d3930361d2320382d3e0c24483d35330b2232221f2c38291d2333200e2437280c3a2e2405222e200a22233f1d3f3b3f123f2b2518393a200339332016392d23113b3138122c263618250f1b163e2a55192a21371e3e2d350037313718372137173a3e2405223e200a22202e032321310c3a212f0c34322801282d20163f372e112e2c201421312b1f2837191124203d1e28362a0228362e0f3731371737313718292b31162830350f283a31012b2d3712342120053e2b271b25352914282a26123b2d321e39233f123f2b3b2e2515353e3d262e0228262e1322302f1d3920361223203c1e242220012825330b2232221f2c3829122323200e24272c033a3e200a222e200522333f1d3f2b3b12310317183a5f550339232019393d271e3b2138122c3632182b372d16212820162a31331e3e2d310f37213318372137173a3e2405223e240522202e032321310c3a241e1634322f12283d20193f372e112e2c201b21212f1028322c0b2430360228262e0d28262a0f3731371737213318292b351928203100282a350e2b3d3312342120392415271930352d14283a26123b2d321e39333b123f2b3b1d3f3b360d28262a0d28362a1c22302f1d3920361223203c112432240e282533042222221f2c3829122d0b160e273559033a2e2005223e200a22233f1d3f3b3b123f3b2118392a240339332419393d271e3b313c122c3632182b272919213820162a21371e3e2d35003724020d3731280b3a3e200a222e200a22302a0c2331310c3a312b0c3422280e282d20193f272a112e2c241421212f1f28222c0b2420320d28362e0d28362e0f373133242d1f30293c3b35192830310f282a35012b3d331d3431240a3e3b27142535291b282a26123b2d321139233f1d3f2b3b1d3f3b320228362e0d28362a1c22202b123718041223184911242220012835370b223226102c38291d2333200124372c0c3a2e200a222e200a22233f123f2b3f1d3f3b2117393a200c39232016392d23113b2409072c26310b2b272d19213820162a3133113e3d310f37313717372133183a3e2405223e240a22302e03233131033a212f0334322c01283d24163f272a112e2c20273b1f2b543d2228042430360d28362e0d28362e003721331837213318292b351928303500282a350e2b2d3712342120053e2b271425252d1b282a26123b2d321e371b091223394a123f3b320228262e0d28362e1c22202b1d39203212233038112422200e2825370b2222221f2c282d122333200124372c0c3a2e200a222e200a22360a073f3b2c013f2b2117392a240339332419393d271e3b213c1d2c3632172b372d19213820162a31371e3e2d350037213717373137183a3e2405223e240522202e3f391f35402f312f0c34322c0e282d20193f272a1e2e3c241421312f1028222c042430320228362e0228262e003731371737313717293b31162820310f283a310e250505122b0951053e2b271425252d1b282a26123b2d321e39333b123f2b3f1d3f2b360d28362e0d28362e1322302b1d3930361d23203811242220012835330422270c556c66>

# <hidden may be useful for above string https://www.dcode.fr/xor-cipher >

# <center><BR><BR>
# 	<a href="https://www.eventbrite.com/e/w00w00-defcon-sat-aug-13-5pm-5am-tickets-382308704627">you did the hardest part. now find the password to Register for the event</a><BR><BR><BR>
# 	<br>
# 	solve the puzzle challenge for password.
# 	<br>
# 	<br>
# 	<video width="320" height="240" controls autoplay loop>
# 			    <source src="woo31sm.mp4" />

# 	</video>
# </center>

puzzle = %w[
  T
  XF
  PWD
  NVQM
  BPOQF
  AENRVQ
  LJSQTUW
  FJHLCWMB
  HZUMXYEQN
  XBMGQTLKTF
]

# key = puzzle.join
key = "TWENTYFIVEYEARSOFCHALLENGEVISITWZEROZEROWZEROZERODOTNET"


ciphertext = "230d245c2c2d27113b3138122c2636172b372d19212824162a31371e3e2d350037213318372133173a2e2405222e200522202a0c2331310c3a312f0334322c01261516163f255f112e2c201b21212f10283228042430360d28362e0d28362e003721331837213318292b351928303500282a350e2b2d3712342120053e2b271425201c0e283a29013b2d361139333b1d3f3b3f1d3f3b320d28362a0228362e1322302f123920321223303c1e2422200128353304223226102c382d122333200e2427283f20002447372e240522333b123f2b3b123f2b2518392a240339332419393d27113b313c1d2c2636172b372916212824192a21371e3e2d35003721331837213318341616053e16550522202e0c233135033a312b0c34322c0e283d24163f372e112e3c241421312f1028222c042430320228362e0228262e003721331737313318292e040c28302613282a31012b2d371d3431240a3e3b231425252914282a261d3b3d321e39333b123f2b3b123f2b360228262e0d28262a1c22202b1d3930361d2320382d3e0c24483d35330b2232221f2c38291d2333200e2437280c3a2e2405222e200a22233f1d3f3b3f123f2b2518393a200339332016392d23113b3138122c263618250f1b163e2a55192a21371e3e2d350037313718372137173a3e2405223e200a22202e032321310c3a212f0c34322801282d20163f372e112e2c201421312b1f2837191124203d1e28362a0228362e0f3731371737313718292b31162830350f283a31012b2d3712342120053e2b271b25352914282a26123b2d321e39233f123f2b3b2e2515353e3d262e0228262e1322302f1d3920361223203c1e242220012825330b2232221f2c3829122323200e24272c033a3e200a222e200522333f1d3f2b3b12310317183a5f550339232019393d271e3b2138122c3632182b372d16212820162a31331e3e2d310f37213318372137173a3e2405223e240522202e032321310c3a241e1634322f12283d20193f372e112e2c201b21212f1028322c0b2430360228262e0d28262a0f3731371737213318292b351928203100282a350e2b3d3312342120392415271930352d14283a26123b2d321e39333b123f2b3b1d3f3b360d28262a0d28362a1c22302f1d3920361223203c112432240e282533042222221f2c3829122d0b160e273559033a2e2005223e200a22233f1d3f3b3b123f3b2118392a240339332419393d271e3b313c122c3632182b272919213820162a21371e3e2d35003724020d3731280b3a3e200a222e200a22302a0c2331310c3a312b0c3422280e282d20193f272a112e2c241421212f1f28222c0b2420320d28362e0d28362e0f373133242d1f30293c3b35192830310f282a35012b3d331d3431240a3e3b27142535291b282a26123b2d321139233f1d3f2b3b1d3f3b320228362e0d28362a1c22202b123718041223184911242220012835370b223226102c38291d2333200124372c0c3a2e200a222e200a22233f123f2b3f1d3f3b2117393a200c39232016392d23113b2409072c26310b2b272d19213820162a3133113e3d310f37313717372133183a3e2405223e240a22302e03233131033a212f0334322c01283d24163f272a112e2c20273b1f2b543d2228042430360d28362e0d28362e003721331837213318292b351928303500282a350e2b2d3712342120053e2b271425252d1b282a26123b2d321e371b091223394a123f3b320228262e0d28362e1c22202b1d39203212233038112422200e2825370b2222221f2c282d122333200124372c0c3a2e200a222e200a22360a073f3b2c013f2b2117392a240339332419393d271e3b213c1d2c3632172b372d19213820162a31371e3e2d350037213717373137183a3e2405223e240522202e3f391f35402f312f0c34322c0e282d20193f272a1e2e3c241421312f1028222c042430320228362e0228262e003731371737313717293b31162820310f283a310e250505122b0951053e2b271425252d1b282a26123b2d321e39333b123f2b3f1d3f2b360d28362e0d28362e1322302b1d3930361d23203811242220012835330422270c556c66"
split_cipher = ciphertext.scan(/../).map {|x| x.hex}


# from https://github.com/KyleBanks/XOREncryption/blob/master/Ruby/xor.rb

def xor_stuff(a, key)
  key = key.split ""
  result = ""
  a.each_index do |i|
    result += (a[i] ^ key[i % key.size].ord).chr
  end
  result
end

plaintext = xor_stuff(split_cipher, key)
# This gives
# wZaxtaXmtaWmteXmteXmdaXmtaWmdaWmdaWmdaXmtaWmteWmdeXmteXmtaWmteWcLSWmvWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmaPBmtnDmdeXmdaXmteXmteWmdeXmdaWmdaWmteWmdeXmteXmtaWmteXmtaWmteXmtakwZaxtaWmdaWmdaWmdaWmdaWmdaWmdaXmteXmteXmtaWmdaWmdaWmdaWmdaWmdaWcLSWqLWmdaXmtaWmteXmteXmdaWmdaWmteXmtaWmteWmdeXmdaXmtaWmdaXmtaWmaPBmdrDmdeXmdaXmteXmteWmdeXmdaXmtaWmdaWmdaWmdaXmtaWmteXmteXmdaXmtakwZaxtaXmtaWmteXmteXmdaXmtaWmteXmteXmteWmdaWmteWmdeXmteXmtaWmteWcLSWrfWmdaWmdaWmteWmdeXmdaWmdeXmdaWmdeXmdaXmtaWmteWmdaWmdaXmteXmaPBmtjDmdeXmdaXmteXmteWmdeXmdaXmteXmdaWmdaWmdaXmteXmdaWmdaWmteWmdakwZbdxtaXmtaWmdaXmtaWmteXmteXmdaXmtaWmteWmdeXmteWmdeXmteWmdeXmdaWcLSWnWmteWmdaWmdaWmdaWmteWmdeXmteWmdeXmdaWmdeXmdaWmdaWmdaWmdeXmaPBmtfDmdeXmdaWmdaWmdaWmdeXmdaXmtaWmteXmteXmdaWmdaWmteWmdaWmteWmdakwZaZxtaXmtaWmdaWmdaWmdaXmtaWmteWmdeXmdaXmtaWmteWmdaWmdaWmdaWmteWcLSXnfWmteWmdeXmteXmtaWmteWmdaWmdaWmdaWmteWmdaWmdaXmteXmdaWmdaWmaPBmtzDmdeXmteXmteXmteXmteXmdaXmteXmteWmdeXmdaXmteXmteWmdaWmdaXmtakwZbfxtaWmdeXmdaXmteXmteXmtaWmteWmdaWmdaXmteXmdaXmteXmdaWmdeXmteWcLSWmLWmteXmteXmteXmteXmteWmdeXmteXmteXmteWmdeXmteXmteXmteXmteXmaPBmtbDmdeXmteXmteXmteXmteXmdaWmdaWmdaXmtaWmteWmdaWmteWmdaWmteWmdakwZextaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWmdaWcLSWqvWmteXmtaWmdaXmteXmteWmdaWmteWmdeXmdaWmdaWmteWmdeXmteXmteXmaPBmtvDmdeXmdaWmdaWmdaWmdeXmdaXmteXmteXmtaWmdaWmdeXmteWmdaWmdaWmdakwZaxtaXmteXmteXmteXmteXmtaWmteWmdeXmdaXmtaWmteXmteXmteXmteXmteWcLSWrLWmdaWmdaWmdaWmdaWmdaWmdeXmdaWmdaWmdaWmdeXmdaXmtaWmteXmtaWmaO-*
#
# This looks familiar - lets play with the key

lower_key = key.downcase

plaintext = xor_stuff(split_cipher, lower_key)
# gives us
# WzA2XTAxMTAwMTExMTExMDAxMTAwMDAwMDAwMDAxMTAwMTEwMDExMTExMTAwMTEwClswMV0wMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMApbMTNdMDExMDAxMTExMTEwMDExMDAwMDAwMTEwMDExMTExMTAwMTExMTAwMTExMTAKWzA5XTAwMDAwMDAwMDAwMDAwMDAwMDAxMTExMTExMTAwMDAwMDAwMDAwMDAwMDAwClswQl0wMDAxMTAwMTExMTExMDAwMDAwMTExMTAwMTEwMDExMDAxMTAwMDAxMTAwMApbMDRdMDExMDAxMTExMTEwMDExMDAxMTAwMDAwMDAwMDAxMTAwMTExMTExMDAxMTAKWzA1XTAxMTAwMTExMTExMDAxMTAwMTExMTExMTEwMDAwMTEwMDExMTExMTAwMTEwClswRF0wMDAwMDAwMTEwMDExMDAwMDExMDAwMDExMDAxMTAwMTEwMDAwMDAxMTExMApbMTJdMDExMDAxMTExMTEwMDExMDAxMTExMDAwMDAwMDAxMTExMDAwMDAwMTEwMDAKWzBDXTAxMTAwMDAxMTAwMTExMTExMDAxMTAwMTEwMDExMTEwMDExMTEwMDExMDAwClswN10wMTEwMDAwMDAwMDAwMTEwMDExMTEwMDExMDAwMDExMDAwMDAwMDAwMDExMApbMTFdMDExMDAwMDAwMDAwMDExMDAxMTAwMTExMTExMDAwMDAwMTEwMDAwMTEwMDAKWzAzXTAxMTAwMDAwMDAwMDAxMTAwMTEwMDExMDAxMTAwMTEwMDAwMDAwMDAwMTEwClsxNF0wMTEwMDExMTExMTAwMTEwMDAwMDAwMDAwMTEwMDAwMDAxMTExMDAwMDAwMApbMTZdMDExMTExMTExMTExMTExMDAxMTExMTEwMDExMDAxMTExMTEwMDAwMDAxMTAKWzBFXTAwMDExMDAxMTExMTExMTAwMTEwMDAwMDAxMTExMDAxMTExMDAwMDExMTEwClswMl0wMTExMTExMTExMTExMTEwMDExMTExMTExMTEwMDExMTExMTExMTExMTExMApbMTBdMDExMTExMTExMTExMTExMDAwMDAwMDAxMTAwMTEwMDAwMTEwMDAwMTEwMDAKWzE3XTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwClswQV0wMTExMTAwMDAxMTExMTEwMDAwMTEwMDExMDAwMDAwMTEwMDExMTExMTExMApbMTVdMDExMDAwMDAwMDAwMDExMDAxMTExMTExMTAwMDAwMDExMTEwMDAwMDAwMDAKWzA4XTAxMTExMTExMTExMTExMTAwMTEwMDExMDAxMTAwMTExMTExMTExMTExMTEwClswRl0wMDAwMDAwMDAwMDAwMDAwMDExMDAwMDAwMDAwMDExMDAxMTAwMTExMTAwMAo=

# That looks like base 64.

plaintext = Base64.decode64(plaintext)

# gives us
# [06]01100111111001100000000001100110011111100110
# [01]00000000000000000000000000000000000000000000
# [13]01100111111001100000011001111110011110011110
# [09]00000000000000000001111111100000000000000000
# [0B]00011001111110000001111001100110011000011000
# [04]01100111111001100110000000000110011111100110
# [05]01100111111001100111111110000110011111100110
# [0D]00000001100110000110000110011001100000011110
# [12]01100111111001100111100000000111100000011000
# [0C]01100001100111111001100110011110011110011000
# [07]01100000000001100111100110000110000000000110
# [11]01100000000001100110011111100000011000011000
# [03]01100000000001100110011001100110000000000110
# [14]01100111111001100000000001100000011110000000
# [16]01111111111111100111111001100111111000000110
# [0E]00011001111111100110000001111001111000011110
# [02]01111111111111100111111111100111111111111110
# [10]01111111111111100000000110011000011000011000
# [17]00000000000000000000000000000000000000000000
# [0A]01111000011111100001100110000001100111111110
# [15]01100000000001100111111110000001111000000000
# [08]01111111111111100110011001100111111111111110
# [0F]00000000000000000110000000000110011001111000

# what if we sort this?

sorted_plaintext = plaintext.split("\n").sort

# I see a QR code:
# [01]00000000000000000000000000000000000000000000
# [02]01111111111111100111111111100111111111111110
# [03]01100000000001100110011001100110000000000110
# [04]01100111111001100110000000000110011111100110
# [05]01100111111001100111111110000110011111100110
# [06]01100111111001100000000001100110011111100110
# [07]01100000000001100111100110000110000000000110
# [08]01111111111111100110011001100111111111111110
# [09]00000000000000000001111111100000000000000000
# [0A]01111000011111100001100110000001100111111110
# [0B]00011001111110000001111001100110011000011000
# [0C]01100001100111111001100110011110011110011000
# [0D]00000001100110000110000110011001100000011110
# [0E]00011001111111100110000001111001111000011110
# [0F]00000000000000000110000000000110011001111000
# [10]01111111111111100000000110011000011000011000
# [11]01100000000001100110011111100000011000011000
# [12]01100111111001100111100000000111100000011000
# [13]01100111111001100000011001111110011110011110
# [14]01100111111001100000000001100000011110000000
# [15]01100000000001100111111110000001111000000000
# [16]01111111111111100111111001100111111000000110
# [17]00000000000000000000000000000000000000000000


png = ChunkyPNG::Image.new(100, 100, ChunkyPNG::Color::WHITE)
png.save("qr.png")

sorted_plaintext.each_with_index do |line, row_index|
  line.each_char.with_index do |column, column_index|
    if column == '1'
      png[column_index, row_index*2] = ChunkyPNG::Color::BLACK
      png[column_index, row_index*2+1] = ChunkyPNG::Color::BLACK

    end
  end
end
png.save("qr.png")

# The QR code is text that says "challenge2022"

# See you at the party.
